package my.projects.datastore.domain;

import static my.projects.datastore.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class UserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllPropertiesEquals(User expected, User actual) {
        assertUserAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllUpdatablePropertiesEquals(User expected, User actual) {
        assertUserUpdatableFieldsEquals(expected, actual);
        assertUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAutoGeneratedPropertiesEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableFieldsEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User relevant properties")
            .satisfies(e -> assertThat(e.getExternalUserId()).as("check externalUserId").isEqualTo(actual.getExternalUserId()))
            .satisfies(e -> assertThat(e.getUsername()).as("check username").isEqualTo(actual.getUsername()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e ->
                assertThat(e.getRegisteredDate())
                    .as("check registeredDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getRegisteredDate())
            )
            .satisfies(e ->
                assertThat(e.getLastLoginTime())
                    .as("check lastLoginTime")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getLastLoginTime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableRelationshipsEquals(User expected, User actual) {
        // empty method
    }
}
